-- ================================================
-- Courier Management System - Complete Database Schema
-- PostgreSQL DDL Script
-- ================================================

-- Enable UUID extension for generating random UUIDs
CREATE EXTENSION IF NOT EXISTS "gen_random_uuid";

-- ================================================
-- ENUMS
-- ================================================

-- User role enum
CREATE TYPE role AS ENUM ('admin', 'sub_admin', 'manager', 'user');

-- Courier status enum  
CREATE TYPE status AS ENUM ('on_the_way', 'received', 'completed', 'delivered', 'deleted', 'dispatched');

-- Field type enum for custom fields
CREATE TYPE field_type AS ENUM ('text', 'calendar', 'dropdown');

-- ================================================
-- TABLES (in dependency order)
-- ================================================

-- Sessions table (required for session management)
CREATE TABLE sessions (
    sid VARCHAR PRIMARY KEY,
    sess JSONB NOT NULL,
    expire TIMESTAMP NOT NULL
);

-- Create index on expire column for session cleanup
CREATE INDEX "IDX_session_expire" ON sessions (expire);

-- Departments table (independent table)
CREATE TABLE departments (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    authority_document_path VARCHAR(255),
    deleted_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Fields table (independent table)
CREATE TABLE fields (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    type field_type,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Users table (depends on departments)
CREATE TABLE users (
    id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR UNIQUE,
    first_name VARCHAR,
    last_name VARCHAR,
    profile_image_url VARCHAR,
    name VARCHAR(100),
    employee_code VARCHAR(50),
    mobile_number VARCHAR(15),
    password TEXT,
    role role DEFAULT 'user',
    department_id INTEGER REFERENCES departments(id),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- User-Department junction table (multi-department support)
CREATE TABLE user_departments (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR REFERENCES users(id) ON DELETE CASCADE,
    department_id INTEGER REFERENCES departments(id) ON DELETE CASCADE,
    assigned_at TIMESTAMP DEFAULT NOW()
);

-- Department fields junction table
CREATE TABLE department_fields (
    id SERIAL PRIMARY KEY,
    department_id INTEGER REFERENCES departments(id),
    field_id INTEGER REFERENCES fields(id)
);

-- Couriers table (main courier tracking)
CREATE TABLE couriers (
    id SERIAL PRIMARY KEY,
    department_id INTEGER REFERENCES departments(id),
    created_by VARCHAR REFERENCES users(id),
    to_branch VARCHAR(100),
    email VARCHAR(100),
    cc_emails TEXT,
    courier_date DATE,
    vendor VARCHAR(100),
    custom_vendor VARCHAR(100),
    pod_no VARCHAR(100),
    details TEXT,
    contact_details TEXT,
    receiver_name VARCHAR(100),
    remarks TEXT,
    status status DEFAULT 'on_the_way',
    received_date DATE,
    received_remarks TEXT,
    pod_copy_path VARCHAR,
    confirmation_token VARCHAR(255),
    reminder_email_sent BOOLEAN DEFAULT FALSE,
    reminder_email_sent_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Received couriers table (inbound courier tracking)
CREATE TABLE received_couriers (
    id SERIAL PRIMARY KEY,
    department_id INTEGER REFERENCES departments(id),
    created_by VARCHAR REFERENCES users(id),
    pod_number VARCHAR(100) NOT NULL,
    received_date DATE NOT NULL,
    from_location VARCHAR(200) NOT NULL,
    to_user VARCHAR(200),
    courier_vendor VARCHAR(100) NOT NULL,
    custom_vendor VARCHAR(100),
    receiver_name VARCHAR(100),
    email_id VARCHAR(100),
    cc_emails TEXT,
    send_email_notification BOOLEAN DEFAULT FALSE,
    custom_department VARCHAR(100),
    remarks TEXT,
    status status DEFAULT 'received',
    confirmation_token VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- SMTP settings table (email configuration)
CREATE TABLE smtp_settings (
    id SERIAL PRIMARY KEY,
    host VARCHAR(200),
    port INTEGER,
    use_tls BOOLEAN DEFAULT FALSE,
    use_ssl BOOLEAN DEFAULT FALSE,
    username VARCHAR(100),
    password TEXT,
    from_email VARCHAR(100),
    from_name VARCHAR(100),
    application_url VARCHAR(255)
);

-- SAML settings table (SSO configuration)
CREATE TABLE saml_settings (
    id SERIAL PRIMARY KEY,
    enabled BOOLEAN DEFAULT FALSE,
    entity_id VARCHAR(500),
    sso_url VARCHAR(500),
    slo_url VARCHAR(500),
    x509_certificate TEXT,
    attribute_mapping JSONB,
    name_id_format VARCHAR(200) DEFAULT 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress',
    sign_requests BOOLEAN DEFAULT FALSE,
    want_assertions_signed BOOLEAN DEFAULT TRUE,
    skillmine_integration BOOLEAN DEFAULT FALSE,
    callback_url VARCHAR(500),
    metadata_url VARCHAR(500),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Audit logs table (system activity tracking)
CREATE TABLE audit_logs (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR REFERENCES users(id),
    action VARCHAR(50),
    entity_type VARCHAR(50),
    entity_id VARCHAR(100),
    email_id VARCHAR(255),
    details TEXT,
    entity_data JSONB,
    timestamp TIMESTAMP DEFAULT NOW()
);

-- Branches table (branch management)
CREATE TABLE branches (
    id SERIAL PRIMARY KEY,
    sr_no INTEGER,
    branch_name VARCHAR(255) NOT NULL,
    branch_code VARCHAR(50) NOT NULL UNIQUE,
    branch_address TEXT NOT NULL,
    pincode VARCHAR(10) NOT NULL,
    state VARCHAR(100) NOT NULL,
    latitude VARCHAR(50),
    longitude VARCHAR(50),
    email VARCHAR(255),
    status VARCHAR(20) DEFAULT 'active' NOT NULL,
    department_id INTEGER REFERENCES departments(id),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- User policies table (department-based permissions)
CREATE TABLE user_policies (
    id SERIAL PRIMARY KEY,
    department_id INTEGER REFERENCES departments(id),
    tab_name VARCHAR(100) NOT NULL,
    is_enabled BOOLEAN DEFAULT TRUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Password reset tokens table (password recovery)
CREATE TABLE password_reset_tokens (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    is_used BOOLEAN DEFAULT FALSE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Vendors table (courier vendor management)
CREATE TABLE vendors (
    id SERIAL PRIMARY KEY,
    vendor_name VARCHAR(100) NOT NULL,
    mobile_number VARCHAR(15),
    email VARCHAR(100),
    address TEXT,
    is_active BOOLEAN DEFAULT TRUE NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Authority letter templates table (document templates)
CREATE TABLE authority_letter_templates (
    id SERIAL PRIMARY KEY,
    department_id INTEGER REFERENCES departments(id),
    template_name VARCHAR(255) NOT NULL,
    template_content TEXT NOT NULL,
    template_description TEXT,
    is_default BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    word_template_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Authority letter fields table (template placeholders)
CREATE TABLE authority_letter_fields (
    id SERIAL PRIMARY KEY,
    template_id INTEGER REFERENCES authority_letter_templates(id) ON DELETE CASCADE,
    department_id INTEGER REFERENCES departments(id),
    field_name VARCHAR(255) NOT NULL,
    field_label VARCHAR(255) NOT NULL,
    field_type VARCHAR(50) DEFAULT 'text' NOT NULL,
    text_transform VARCHAR(30) DEFAULT 'none',
    number_format VARCHAR(20) DEFAULT 'none',
    date_format VARCHAR(30) DEFAULT 'DD-MM-YYYY',
    sort_order INTEGER DEFAULT 0,
    is_required BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Field dropdown options table (for custom dropdown fields)
CREATE TABLE field_dropdown_options (
    id SERIAL PRIMARY KEY,
    field_id INTEGER REFERENCES fields(id) ON DELETE CASCADE,
    department_id INTEGER REFERENCES departments(id),
    option_value VARCHAR(255) NOT NULL,
    option_label VARCHAR(255) NOT NULL,
    sort_order INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- ================================================
-- INDEXES (for better performance)
-- ================================================

-- User email index for faster lookups
CREATE INDEX idx_users_email ON users(email);

-- Department name index
CREATE INDEX idx_departments_name ON departments(name);

-- Courier status and date indexes for filtering
CREATE INDEX idx_couriers_status ON couriers(status);
CREATE INDEX idx_couriers_courier_date ON couriers(courier_date);
CREATE INDEX idx_couriers_department_id ON couriers(department_id);

-- Received couriers indexes
CREATE INDEX idx_received_couriers_status ON received_couriers(status);
CREATE INDEX idx_received_couriers_received_date ON received_couriers(received_date);
CREATE INDEX idx_received_couriers_department_id ON received_couriers(department_id);

-- Audit log timestamp index
CREATE INDEX idx_audit_logs_timestamp ON audit_logs(timestamp);

-- Branch code index for fast lookups
CREATE INDEX idx_branches_branch_code ON branches(branch_code);

-- Password reset token indexes
CREATE INDEX idx_password_reset_tokens_token ON password_reset_tokens(token);
CREATE INDEX idx_password_reset_tokens_email ON password_reset_tokens(email);

-- ================================================
-- INITIAL DATA (Optional - uncomment if needed)
-- ================================================

-- Insert default admin user (uncomment and modify as needed)
-- INSERT INTO users (id, name, email, password, role) VALUES 
-- (gen_random_uuid(), 'Admin User', 'admin@example.com', '$2b$10$hashedpassword', 'admin');

-- Insert default department (uncomment and modify as needed)
-- INSERT INTO departments (name) VALUES ('Default Department');

-- ================================================
-- COMPLETION MESSAGE
-- ================================================

-- All tables created successfully!
-- You can now start using the courier management system.
-- Remember to:
-- 1. Update user passwords with properly hashed values
-- 2. Configure SMTP settings for email functionality
-- 3. Set up proper user roles and departments
-- 4. Configure SAML settings if using SSO

SELECT 'Database schema created successfully!' AS status;